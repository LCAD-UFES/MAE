SetLongShort(1); # Long
LoadDayFileName("data.txt");

int N_DAYS;
N_DAYS = 30;

/* Network Status */
int TRAINING_PHASE;
TRAINING_PHASE = 1;
int TESTING_PHASE;
TESTING_PHASE = 2;
int WARM_UP_PHASE;
WARM_UP_PHASE = 3;

/* Counters */
int day_i;
int tick;
int loaded;
int i;

day_i = 0;
clear out_result;

while ( day_i < N_DAYS )
{
	i = 0;
	ResetStatistics(0);
	LoadDay(day_i);
	
	while ( i < 2 )
	{	
		/* Training Phase */
		if (i == 0)
		{
			tick = TimeToStart(0);
			
			while (tick == 0)
			{
				Move1Tick(0);
				tick = TimeToStart(0);
			}		
		
			while(tick != 0)
			{
				loaded = LoadInput(0);
		
				#print("loaded=", loaded);
				if (loaded == 1)
				{
					forward filters;
					forward neural_layers;
					forward outputs;
			
					#ShowStatistics(0);
			
					/* Draws the landmark neuron layer output */
					draw out_prediction based on ita move;
					train network;
				}
				Move1Tick(loaded);
						
				tick = TimeToTrain(0);
				#print("train=", tick);		
			}
		}
		else
		{
			ResetStatistics(0);
			SetNetworkStatus(TESTING_PHASE);
			
			tick = TimeToStart(0);
		
			while (tick == 0)
			{
				Move1Tick(0);
				tick = TimeToStart(0);
			}	
			
			while(tick != 0)
			{
				loaded = LoadInput(0);
				
				#print("loaded=", loaded);
				if (loaded == 1)
				{
					#print("test=", tick);	
					
					forward filters;
					forward neural_layers;
					forward outputs;
			
					#ShowNeuronsMemory(0);
					#ShowStatistics(0);
				}
				Move1Tick(loaded);
				
				tick = TimeToTrain(0);	
				#print("test=", tick);	
			}	
			PrintCapital(0);

			# save day result in file
			ShowStatisticsExp(0);
		}
		
		i = i + 1;
	}
	
	clear network memory;
	day_i = day_i + 1;
}

MeanStatisticsExp(0);

quit;
