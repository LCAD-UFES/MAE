################################################ Set Global Variables #################################################

set NEURON_MEMORY_SIZE = 2*3024;  
set TYPE_SHOW = SHOW_FRAME;
set TYPE_MOVING_FRAME = STOP;

######################################################## Constants ####################################################

#Scale variation parameter
#const i = 1;

# General settings
const FOV_HORIZONTAL = 48.0;
const TARGET_NEURON_LAYER_NAME = "nl_target_coordinates";

# Architecture settings
const IMAGE_WIDTH  = 384;
const IMAGE_HEIGHT = 288;

#Default NL size
#const NL_WIDTH  = 64;
#const NL_HEIGHT = 48;

const NL_WIDTH  = 16*4;
const NL_HEIGHT = 12*4;

const INPUTS_PER_NEURON = 256;
const GAUSSIAN_RADIUS = 10.0;
const LOG_FACTOR = 2.0;

const BAND_WIDTH = 0.125;

# Network status conventions
const TRAINNING	= 0;
const RUNNING	= 1;

# Search heuristic parameters
const CUT_POINT	= 0.7;

# Translation filter deltaX & delataY
float	translation_filter_deltaX = 0.0;
float	translation_filter_deltaY = 0.0;

#Neuron layer activation bandwidth
const   ACT_BAND_WIDTH = 2*4;

#Activation Bandwidth output value ( highest output )
float   HIGHEST_OUTPUT = 1.0;

#const INPUT_PATH	= "/dados/ARPhotoDataBase/";
const INPUT_PATH	= "/home/hallysson/img/ARDataBase/ARPhotoDataBase/";

############################################### Neuron Layers #########################################################

#PS: nl_v1_activation_map is the only neural layer with actual neuron memory
neuronlayer    	nl_v1_activation_map[NL_WIDTH][NL_HEIGHT]	of minchinton neurons color sensitive with greyscale_float outputs using shared memory ;

neuronlayer    	nl_v1_activation_map_f[NL_WIDTH][NL_HEIGHT] 	with greyscale_float outputs;

neuronlayer    	nl_target_coordinates[2][1]			with greyscale_float outputs;

neuronlayer    	nl_v1_pattern[NL_WIDTH][NL_HEIGHT]	       	with color outputs;

neuronlayer    	in_pattern_filtered[IMAGE_WIDTH][IMAGE_HEIGHT]	with color outputs;

neuronlayer    	in_pattern_filtered_translated[IMAGE_WIDTH][IMAGE_HEIGHT]	with color outputs, show;

############################################### Outputs #########################################################

#parameters: 	output_handler_min_value_position ("%s %f", <nl_target_coordinates_name>, <log_factor>)
#output         out_v1_activation_map[NL_WIDTH][NL_HEIGHT]  handled by output_handler_min_value_position ("%s %f", TARGET_NEURON_LAYER_NAME, LOG_FACTOR);

#parameters: 	output_handler_max_value_position ("%s %f", <nl_target_coordinates_name>, <log_factor>)
output		out_v1_activation_map[NL_WIDTH][NL_HEIGHT] handled by output_handler_max_value_position ("%s %f", TARGET_NEURON_LAYER_NAME, LOG_FACTOR);

#parameters: 	output_handler_mean_position ("%s %f %f", <nl_target_name_coordinates>, <log_factor>, <cut_point>)
#output		out_v1_activation_map[NL_WIDTH][NL_HEIGHT]  handled by output_handler_mean_position ("%s %f %f %f", TARGET_NEURON_LAYER_NAME, LOG_FACTOR, CUT_POINT, BAND_WIDTH);

output         	out_target_coordinates[2][1];

#output         	out_v1_pattern[NL_WIDTH][NL_HEIGHT];

#Non-filtered v1 activation map - for experimental purposes
output		out_v1_activation_map_no_filters[NL_WIDTH][NL_HEIGHT];

################################################## Inputs #############################################################

input 		in_pattern[IMAGE_WIDTH][IMAGE_HEIGHT]	with color outputs produced by input_generator() controled by input_controler();

############################################### Filters ###############################################################   

#parameters: 	gaussian_filter ("%s %d", <kernel size>, <sigma>)
filter		in_pattern	 	with gaussian_filter ("%d %f", 5, 1.0) producing in_pattern_filtered;

#parameters:	translate_nl_filter ("%f %f",Delta_X,Delta_Y)
filter		in_pattern_filtered	with translate_nl_filter ("%p %p",&translation_filter_deltaX,&translation_filter_deltaY) producing in_pattern_filtered_translated;

#parameters: 	map_image_v1 ("%s %d", <input_name>, <log_factor>)
#filter		in_pattern  		with map_image_v1 ("%s %f", "in_pattern", LOG_FACTOR) 	producing nl_v1_pattern;

#parameters: 	gaussian_filter ("%s %d", <kernel size>, <sigma>)
filter		nl_v1_activation_map 	with gaussian_filter ("%d %f", 9, 1.0) producing nl_v1_activation_map_f;

################################## Connect Neuron Layers to Outputs #############################################

outputconnect	nl_v1_activation_map		to out_v1_activation_map_no_filters;

outputconnect	nl_v1_activation_map_f		to out_v1_activation_map;

outputconnect  	nl_target_coordinates		to out_target_coordinates;

#outputconnect  	nl_v1_pattern 			to out_v1_pattern;

############################################### Associations ####################################################

associate	nl_v1_activation_map		with	nl_v1_activation_map;

################################################ Connections ####################################################

#A first experiment of a connection to a shared memory neural layer
connect in_pattern_filtered_translated to nl_v1_activation_map with INPUTS_PER_NEURON random inputs per neuron and log_polar distribution with radius GAUSSIAN_RADIUS and logfactor LOG_FACTOR , same interconnection pattern;

################################################# User Functions ################################################
	
int calculate_random_position ("%d %d %d %d"); 
int get_target_coordinates ("%p %p %f");
#int get_photo ("%d %d");

int GetFace("%d %d %d");
int GetRandomFace("%d");
int Move2Eye ("%d");
int Move2Nose ("%d");
int Move2Mouth ("%d");
int SetNetworkStatus ("%d");
int update_input_filters("");
