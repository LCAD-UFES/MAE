/* Counters */
int i;
int retrain;
int numRetrain;
int numLastRetrained;
int JustTrained;
int num_pixels;
int x;
int y;
int x_retrain;
int y_retrain;
int best_x;
int best_y;
float confidence;
float best_confidence;
float confidenceToRetrain;
float confidenceLevel;
float scale_factor_in_train;
float scale_zoom;
float scale_before;
int out_of_scene;
float scale_to_retrain;
float scale_to_retrain_i;
float best_confidence_to_retrain;
float best_scale_to_retrain;
int best_x_to_retrain;
int best_y_to_retrain;
float confidence_zoom;
float best_confidence_zoom;
int poseInVector;
int menorPose;


i = 0;
/* Trainning */
#Treinando com a imagem 0
GetImage(i);
MoveToTargetCenter(0);
key t;
ForwardVisualSearchNetwork(0);
forward outputs;
scale_factor_in_train = GetScaleFactorInTrain(0);

/* Testing */
numLastRetrained = -1;
i = i + 1;
GetImage(i);
MoveToTargetCenter(0);
JustTrained = 1;

while (i < 8576)
{
	GetImage(i);
	
	out_of_scene = GetOutOfScene(0);
	
	if (out_of_scene == 0)
	{
		/* Escala frame anterior*/
		scale_before = GetScaleBefore(0);
	
		SetScaleFactor(scale_before);
		ForwardVisualSearchNetwork(0);
		forward outputs;

		key s;
		
		/*Atualizando escala*/
		scale_zoom = GetScaleFactorZoom(0);
		if (scale_zoom > scale_factor_in_train + (scale_factor_in_train * 0.75))
		{
			scale_zoom = scale_before;
		}
		if (scale_zoom < scale_factor_in_train - (scale_factor_in_train * 0.85))
		{
			scale_zoom = scale_before;
		}
		SetScaleFactor(scale_zoom);
		ForwardVisualSearchNetwork(0);
		forward outputs;

	}
		
	key s;

	x_retrain = GetX(i); 
	y_retrain = GetY(i);
	confidence = GetConfidence(0);
	retrain = EvaluateDetection(0);
	if (JustTrained == 1)
	{
		JustTrained = 0;
		retrain = 0;
	}
	if (retrain == 1)
	{
		numRetrain = ImageToRetrain(0);
		out_of_scene = GetOutOfScene(numRetrain);
		if (out_of_scene == 0)
		{
			GetImage(numRetrain);
			num_pixels = GetNumPixels(0);
			x_retrain = GetX(numRetrain); 
			y_retrain = GetY(numRetrain);

			if (x_retrain >= 0 && y_retrain >= 0 && numLastRetrained + 10 < numRetrain)
			{
				scale_to_retrain = GetScaleToRetrain(numRetrain);
				scale_to_retrain_i = scale_to_retrain * 0.985 * 0.985;
				best_confidence_to_retrain = 0.0;
				best_scale_to_retrain = scale_to_retrain;

				best_confidence = 0.0;
				confidence = 0.0;
				menorPose = 1000;
				best_confidence_zoom = 0.0;
				confidence_zoom = 0.0;

				while (scale_to_retrain_i <= scale_to_retrain * 1.015 * 1.015)
				{
					if ((scale_to_retrain_i < scale_factor_in_train + (scale_factor_in_train * 0.75)) && 						(scale_to_retrain_i > scale_factor_in_train - (scale_factor_in_train * 0.85)))
					{
						SetScaleFactor(scale_to_retrain_i);
						ForwardVisualSearchNetwork(0);
						forward outputs;

						x = x_retrain - (num_pixels / 2); 
						y = y_retrain - (num_pixels / 2);
						best_x = x;
						best_y = y; 
	
						while (y <= (y_retrain + (num_pixels / 2)))
						{
							while (x <= (x_retrain + (num_pixels / 2)))
							{
								MoveToPoint(x, y);
								ForwardVisualSearchNetwork(0);
								forward outputs;
								SetImageOrder(i);

								confidence_zoom = GetConfidenceZoom(0);
								poseInVector = GetDistanceZoom(0);

								if (poseInVector == menorPose)
								{
									if (confidence_zoom > best_confidence_zoom)
									{							
										best_x = x;
										best_y = y;
										confidence = GetConfidence(0);
										best_confidence = confidence;
										best_confidence_zoom = confidence_zoom;
										best_scale_to_retrain = scale_to_retrain_i;
									}
						
								}
								else
								{
									if (poseInVector < menorPose)
									{
										best_x = x;
										best_y = y;
										confidence = GetConfidence(0);
										best_confidence = confidence;
										menorPose = poseInVector;
										best_confidence_zoom = confidence_zoom;
										best_scale_to_retrain = scale_to_retrain_i;
									}
								}
								x = x + 1;
							}
							x = x_retrain - (num_pixels / 2);
							y = y + 1;
						}
					}
					scale_to_retrain_i = scale_to_retrain_i * 1.015;
				}

				confidenceLevel = GetConfidenceLevel(0);
				if ( best_confidence > confidenceLevel )
				{
					SetScaleFactor(best_scale_to_retrain);
					ForwardVisualSearchNetwork(0);
					forward outputs;
					MoveToPoint(best_x, best_y);
					key t;
					ForwardVisualSearchNetwork(0);
					forward outputs;
					#scale_factor_in_train = GetScaleFactorInTrain(0);
					JustTrained = 1;
					numLastRetrained = numRetrain;
					i = i - 1;
				}
			}
		}
	}
	else
		CheckTrafficSignDetection(0);

	i = i + 1;

}
SaveTLDReasultsFile(0);
quit;








