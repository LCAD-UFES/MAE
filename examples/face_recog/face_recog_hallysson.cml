int PERSONS;
PERSONS = 25;

int SEXES;
SEXES = 2;

int FACES_T;
FACES_T = 6;

int FACES_R;
FACES_R = 7;

int face_list_t[6];
face_list_t[0] = 2;
face_list_t[1] = 3;
face_list_t[2] = 4;
face_list_t[3] = 7;
face_list_t[4] = 8;
face_list_t[5] = 11;

int face_list_r[7];
face_list_r[0] = 1;
face_list_r[1] = 5;
face_list_r[2] = 6;
face_list_r[3] = 9;
face_list_r[4] = 10;
face_list_r[5] = 12;
face_list_r[6] = 13;

/* Counters */
int i;
int j;
int k;

/* Network Status */
int MOVING_FACE;
MOVING_FACE = 0;
int TRAINING_FACE;
TRAINING_FACE = 1;
int TESTING_FACE;
TESTING_FACE = 2;

/* Training Phase */
SetNetworkStatus (TRAINING_FACE);
i = 1;
while (i <= PERSONS)
{
	if (i != 11 && i != 6)
	{
	j = 0;
	while (j < SEXES)
	{
		k = 0;
		while (k < FACES_T)
		{
			GetFace (j, i, face_list_t[k]);

			/* Updates the eye, nose and mouth filter's outputs */
			Move2Nose (0);

			/* Draws the eye, nose and mouth neuron layer's outputs */
			draw out_nose based on face_recog move;

			forward outputs;
			train network;

			k = k + 1;
		}
		j = j + 1;
	}
	}
	i = i + 1;
}

	
/* Testing phase */
SetNetworkStatus (TESTING_FACE);
i = 1;
while (i <= PERSONS)
{
	if (i != 11 && i != 6)
	{
	j = 0;
	while (j < SEXES)
	{
		k = 0;
		while (k < FACES_R)
		{
			GetFace (j, i, face_list_r[k]);

			/* Updates the eye, nose and mouth filter's outputs */
			Move2Nose (0);

			forward neural_layers;
			forward outputs;

			ShowStatistics (0);

			k = k + 1;
		}
		j = j + 1;
	}
	}
	i = i + 1;
}

quit;
