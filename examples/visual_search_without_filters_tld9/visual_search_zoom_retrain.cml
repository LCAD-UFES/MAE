/* Counters */
int i;
int retrain;
int numRetrain;
int numLastRetrained;
int JustTrained;
int num_pixels;
int x;
int y;
int x_retrain;
int y_retrain;
int best_x;
int best_y;
float confidence;
float best_confidence;
float confidenceLevel;
float scale_zoom;
float scale_before;
int out_of_scene;
float scale_to_retrain;
float max_scale;
float min_scale;
int num_frames;

i = 0;
/* Trainning */
#Treinando com a imagem 0
GetImage(i);
MoveToTargetCenter(0);
key t;
ForwardVisualSearchNetwork(0);
#forward outputs;

/* Testing */
numLastRetrained = -1;
i = i + 1;
GetImage(i);
MoveToTargetCenter(0);
JustTrained = 1;

max_scale = GetMaxScale(0);
min_scale = GetMinScale(0);
num_frames = GetNumFrames(0);

while (i < num_frames)
{
	GetImage(i);
	
	out_of_scene = GetOutOfScene(0);
	
	if (out_of_scene == 0)
	{
		/* Escala frame anterior*/
		scale_before = GetScaleBefore(0);	
		SetScaleFactor(scale_before);
		ForwardVisualSearchNetwork(0);
		key s;

		/*Atualizando escala*/
		scale_zoom = GetScaleFactorZoom(0);


		if (scale_zoom > max_scale)
		{
			scale_zoom = scale_before;
		}

		if (scale_zoom < min_scale)
		{
			scale_zoom = scale_before;
		}

		SetScaleFactor(scale_zoom);
		ForwardVisualSearchNetwork(0);


	}
		
	key s;

	x_retrain = GetX(i); 
	y_retrain = GetY(i);
	confidence = GetConfidence(0);
	retrain = EvaluateDetection(0);

	if (JustTrained == 1)
	{
		JustTrained = 0;
		retrain = 0;
	}

	if (retrain == 1)
	{
		numRetrain = ImageToRetrain(0);
		out_of_scene = GetOutOfScene(numRetrain);

		if (out_of_scene == 0 && numLastRetrained + 10 < numRetrain)
		{
			GetImage(numRetrain);

			scale_to_retrain = GetScaleToRetrain(numRetrain);
			SetScaleFactor(scale_to_retrain);
			ForwardVisualSearchNetwork(0);
			#forward outputs;

			num_pixels = GetNumPixels(0);
			x_retrain = GetX(numRetrain); 
			y_retrain = GetY(numRetrain);

			#if (x_retrain >= 0 && y_retrain >= 0 && numLastRetrained + 10 < numRetrain)
			if (x_retrain >= 0 && y_retrain >= 0 )
			{
				x = x_retrain - (num_pixels / 2); 
				y = y_retrain - (num_pixels / 2);
				best_x = x;
				best_y = y; 
				best_confidence = 0.0;
				confidence = 0.0;

				while (y <= (y_retrain + (num_pixels / 2)))
				{
					while (x <= (x_retrain + (num_pixels / 2)))
					{
						MoveToPoint(x, y);
						SetImageOrder(i);
						confidence = GetConfidence(0);

						if (confidence > best_confidence)
						{
							best_x = x;
							best_y = y;
							best_confidence = confidence;
						}
						x = x + 1;
					}
					x = x_retrain - (num_pixels / 2);
					y = y + 1;
				}
	
				confidenceLevel = GetConfidenceLevel(0);

				if ( best_confidence > confidenceLevel )
				{
					MoveToPoint(best_x, best_y);
					key t;
					ForwardVisualSearchNetwork(0);
					JustTrained = 1;
					numLastRetrained = numRetrain;
					i = i - 1;
				}
			}
		}

	}
	#else
		CheckTrafficSignDetection(0);

	i = i + 1;
	#print(" ", i );
}
SaveTLDReasultsFile(0);
quit;



