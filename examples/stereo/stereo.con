################################################ Set Global Variables #################################################
# Global Variables
set NEURON_MEMORY_SIZE = 1;
set TYPE_SHOW = SHOW_FRAME;
set TYPE_MOVING_FRAME = STOP;

# Camera Parameters
set CAMERA_DISTANCE = 6.9; # [cm]
#set PYRAMID_LEVEL = 0;
#set FOCAL_DISTANCE  = 400.0; # [pixels]

######################################################## Constants ####################################################
#### INPUT & Neuron Layer Dimentions
const INPUT_WIDTH  = 256;
const INPUT_HEIGHT = 256;
const NL_WIDTH  = 160;
const NL_HEIGHT = 120;

#### Camera Constants
const FOV_HORIZONTAL          = 47.05;
const FOV_VERTICAL            = 35.71;

#### Input data file name
const CAMERA_LEFT_CONSTANTS_FILE_NAME = "CameraLeftConstants.dat";
const CAMERA_RIGHT_CONSTANTS_FILE_NAME	= "CameraRightConstants.dat";
const WINDOWS_CAPTURE_SCRIPT = "capture.bat";
const LINUX_CAPTURE_SCRIPT = "./capture.sh";
const CAPTURE_SCRIPT = WINDOWS_CAPTURE_SCRIPT;

#### Application constants
const GET_IMAGE_FROM_RBT      = 0;
const GET_IMAGE_FROM_PNM      = 1;
const GET_IMAGE_FROM_SMV      = 2;
const IMAGE_SOURCE = GET_IMAGE_FROM_PNM;

const LOG_FACTOR              = 2.0;
const CYCLES_PER_DEGREE       = 0.45;

# Viewer parameters
const FOVY = 47.05; # [deg]
const FAR = 750.0; # [mm]
const NEAR = 0.1; # [mm]
const FOCUS = 400.0; # [pix]

# Camera CCD formats
const QUARTER_INCH	= 0;
const THIRD_INCH	= 1;
const HALF_INCH		= 2;
const TWO_THIRDS_INCH	= 3;
const ONE_INCH		= 4;
const CCD_FORMAT 	= HALF_INCH;

# Vergence parameters
const NEAREST_DISTANCE	= 1500.0; # [mm]
const FARTEST_DISTANCE	= 3000.0; # [mm]

################################################# Inputs #######################################################
input		image_left[INPUT_WIDTH][INPUT_HEIGHT]		with color outputs and 4 gaussian pyramid copies produced by input_generator("%d", IMAGE_SOURCE) controled by input_controler();
input		image_right[INPUT_WIDTH][INPUT_HEIGHT]		with color outputs and 4 gaussian pyramid copies produced by input_generator("%d", IMAGE_SOURCE) controled by input_controler();

############################################### Neuron Layers ##################################################

neuronlayer	nl_simple_mono_right[NL_WIDTH][NL_HEIGHT]	with	greyscale_float outputs;
neuronlayer	nl_simple_mono_left[NL_WIDTH][NL_HEIGHT]	with	greyscale_float outputs;
neuronlayer	nl_simple_mono_right_q[NL_WIDTH][NL_HEIGHT]	with	greyscale_float outputs;
neuronlayer	nl_simple_mono_left_q[NL_WIDTH][NL_HEIGHT]	with	greyscale_float outputs;

neuronlayer	nl_mag_right[NL_WIDTH][NL_HEIGHT]		with	greyscale_float outputs;
neuronlayer	nl_mag_left[NL_WIDTH][NL_HEIGHT]		with	greyscale_float outputs;
neuronlayer	nl_phase_right[NL_WIDTH][NL_HEIGHT]		with	greyscale_float outputs;
neuronlayer	nl_phase_left[NL_WIDTH][NL_HEIGHT]		with	greyscale_float outputs;

neuronlayer	nl_mean_mag[NL_WIDTH][NL_HEIGHT]		with	greyscale_float outputs;
neuronlayer	nl_phase_diff[NL_WIDTH][NL_HEIGHT]		with	greyscale_float outputs;

neuronlayer	nl_pooled_phase_diff[NL_WIDTH][NL_HEIGHT]	with	greyscale_float outputs;

neuronlayer	nl_disparity_map[NL_WIDTH][NL_HEIGHT]	      	with	greyscale_float outputs;

############################################### Outputs ########################################################

output		out_simple_mono_right[NL_WIDTH][NL_HEIGHT];
output		out_simple_mono_left[NL_WIDTH][NL_HEIGHT];
output		out_simple_mono_right_q[NL_WIDTH][NL_HEIGHT];
output		out_simple_mono_left_q[NL_WIDTH][NL_HEIGHT];

output		out_mag_right[NL_WIDTH][NL_HEIGHT];
output		out_mag_left[NL_WIDTH][NL_HEIGHT];
output		out_phase_right[NL_WIDTH][NL_HEIGHT];
output		out_phase_left[NL_WIDTH][NL_HEIGHT];

output		out_mean_mag[NL_WIDTH][NL_HEIGHT];
output		out_phase_diff[NL_WIDTH][NL_HEIGHT];

output		out_pooled_phase_diff[NL_WIDTH][NL_HEIGHT];

output		out_disparity_map[NL_WIDTH][NL_HEIGHT];

################################## Connect Neuron Layers to Outputs #############################################

outputconnect	nl_simple_mono_right 	to out_simple_mono_right;
outputconnect	nl_simple_mono_left 	to out_simple_mono_left;
outputconnect	nl_simple_mono_right_q 	to out_simple_mono_right_q;
outputconnect	nl_simple_mono_left_q 	to out_simple_mono_left_q;

outputconnect	nl_mag_right		to out_mag_right;
outputconnect	nl_mag_left		to out_mag_left;
outputconnect	nl_phase_right		to out_phase_right;
outputconnect	nl_phase_left		to out_phase_left;

outputconnect	nl_mean_mag		to out_mean_mag;
outputconnect	nl_phase_diff		to out_phase_diff;

outputconnect	nl_pooled_phase_diff	to out_pooled_phase_diff;

outputconnect	nl_disparity_map 	to out_disparity_map;

############################################### Filters #########################################################

#biological_gabor_filter("%f %f %f %f %f %f %d %d %f", camera_opening_degree, cycles_per_degree, band_width, aspect_ratio, orientation, phase, shift, mapping, log_factor, kernel_type)

filter		image_right			with biological_gabor_filter ("%f %f %f %f %f %f %d %d %f %d", FOV_HORIZONTAL, CYCLES_PER_DEGREE, 2.0, 1.0, 0.0,    0.0, 0, MAP_LOG_POLAR, LOG_FACTOR, KERNEL_1D)      producing nl_simple_mono_right;
filter		image_right			with biological_gabor_filter ("%f %f %f %f %f %f %d %d %f %d", FOV_HORIZONTAL, CYCLES_PER_DEGREE, 2.0, 1.0, 0.0, pi/2.0, 0, MAP_LOG_POLAR, LOG_FACTOR, KERNEL_1D)      producing nl_simple_mono_right_q;
filter		image_left, nl_disparity_map	with biological_gabor_filter ("%f %f %f %f %f %f %d %d %f %d", FOV_HORIZONTAL, CYCLES_PER_DEGREE, 2.0, 1.0, 0.0,    0.0, 0, MAP_LOG_POLAR, LOG_FACTOR, KERNEL_1D)      producing nl_simple_mono_left;
filter		image_left, nl_disparity_map	with biological_gabor_filter ("%f %f %f %f %f %f %d %d %f %d", FOV_HORIZONTAL, CYCLES_PER_DEGREE, 2.0, 1.0, 0.0, pi/2.0, 0, MAP_LOG_POLAR, LOG_FACTOR, KERNEL_1D)      producing nl_simple_mono_left_q;

filter		nl_simple_mono_right, nl_simple_mono_right_q	with mag_filter ("")		producing	nl_mag_right;
filter		nl_simple_mono_left, nl_simple_mono_left_q	with mag_filter ("")		producing	nl_mag_left;

filter		nl_simple_mono_right, nl_simple_mono_right_q	with phase_filter ("")		producing	nl_phase_right;
filter		nl_simple_mono_left, nl_simple_mono_left_q	with phase_filter ("")		producing	nl_phase_left;

filter		nl_mag_right, nl_mag_left			with mean_mag_filter ("")	producing	nl_mean_mag;
filter		nl_phase_right, nl_phase_left			with phase_diff_filter ("")	producing	nl_phase_diff;

#spatial_pooling_filter("%f %f %f %f %d", camera_opening_degree, cycles_per_degree, band_width, aspect_ratio, orientation)

filter		nl_mean_mag, nl_phase_diff			with spatial_pooling_filter ("%f %f %f %f %d", FOV_HORIZONTAL, CYCLES_PER_DEGREE, 8.0, 1.0, 0.0)	producing nl_pooled_phase_diff;
