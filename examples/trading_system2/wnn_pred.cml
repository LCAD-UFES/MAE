int SAMPLE_GROUP_SIZE;
SAMPLE_GROUP_SIZE = GetSampleGroupSize (0);

int NETWORK_INPUT_SIZE;
NETWORK_INPUT_SIZE = GetNetworkInputSize (0);

int NETWORK_INPUT_STRIDE;
NETWORK_INPUT_STRIDE = GetNetworkInputStride (0);

int FIRST_INPUT_SAMPLES;
FIRST_INPUT_SAMPLES = (NETWORK_INPUT_SIZE * NETWORK_INPUT_STRIDE) / SAMPLE_GROUP_SIZE;

int NUM_SAMPLE_GROUPS;
NUM_SAMPLE_GROUPS = GetNumSampleGroups (0);
#print ("NUM_SAMPLE_GROUPS = ", NUM_SAMPLE_GROUPS);

int NUMBER_OF_SAMPLE_GROUPS_IN_A_DAY;
NUMBER_OF_SAMPLE_GROUPS_IN_A_DAY = 60*7/SAMPLE_GROUP_SIZE;
#print ("NUMBER_OF_SAMPLE_GROUPS_IN_A_DAY = ", NUMBER_OF_SAMPLE_GROUPS_IN_A_DAY);

int SAMPLE_GROUPS2TEST; 		
SAMPLE_GROUPS2TEST = 3 * NUMBER_OF_SAMPLE_GROUPS_IN_A_DAY;
#print ("SAMPLE_GROUPS2TEST = ", SAMPLE_GROUPS2TEST);

/* SAMPLE_GROUPS to discard after everything. Allows leaving data to the final test. */
int SAMPLE_GROUPS2DISCARD_AFTER;
SAMPLE_GROUPS2DISCARD_AFTER = 0;

int SAMPLE_GROUPS2TRAIN; 		
SAMPLE_GROUPS2TRAIN = 1 * NUMBER_OF_SAMPLE_GROUPS_IN_A_DAY;
#print ("SAMPLE_GROUPS2TRAIN = ", SAMPLE_GROUPS2TRAIN);

int SAMPLE_GROUPS2CALIBRATE; 		
SAMPLE_GROUPS2CALIBRATE = 0;


/* Network Status */
int TRAINING_PHASE;
TRAINING_PHASE = 1;
int RECALL_PHASE;
RECALL_PHASE = 2;

/* Counters */
int i;

ResetStatistics (0);

/* Training Phase */
SetNetworkStatus (TRAINING_PHASE);
i = NUM_SAMPLE_GROUPS - SAMPLE_GROUPS2DISCARD_AFTER - SAMPLE_GROUPS2TEST - SAMPLE_GROUPS2CALIBRATE - SAMPLE_GROUPS2TRAIN;
while (i < NUM_SAMPLE_GROUPS - SAMPLE_GROUPS2DISCARD_AFTER - SAMPLE_GROUPS2TEST - SAMPLE_GROUPS2CALIBRATE)
{
	#print ("i = ", i);
	if ((i % NUMBER_OF_SAMPLE_GROUPS_IN_A_DAY) >= FIRST_INPUT_SAMPLES)
	{
		GetSampleGroup (i);
	
		forward network;
	
		/* Draws nl_wnn_pred layer output */
		draw nl_wnn_pred_out based on sample move;

		train network;
	}
	i = i + 1;
}

	
/* Calibrating phase */
SetNetworkStatus (RECALL_PHASE);
#i = 0;
while (i < NUM_SAMPLE_GROUPS - SAMPLE_GROUPS2DISCARD_AFTER - SAMPLE_GROUPS2TEST)
{
	if ((i % NUMBER_OF_SAMPLE_GROUPS_IN_A_DAY) >= FIRST_INPUT_SAMPLES)
	{
		GetSampleGroup(i);
	
		forward network;
	
		/* Draws nl_wnn_pred layer output */
		draw nl_wnn_pred_out based on sample move;

		train network;
	}
	
	i = i + 1;
}

	
/* Testing phase */
SetNetworkStatus (RECALL_PHASE);
#i = 0;
while (i < NUM_SAMPLE_GROUPS - SAMPLE_GROUPS2DISCARD_AFTER)
{
	if ((i % NUMBER_OF_SAMPLE_GROUPS_IN_A_DAY) >= FIRST_INPUT_SAMPLES)
	{
		GetSampleGroup(i);
	
		forward network;
	
		/* Draws nl_wnn_pred layer output */
		draw nl_wnn_pred_out based on sample move;

		train network;
	}
	
	i = i + 1;
}

ShowStatistics (0);

quit; 
