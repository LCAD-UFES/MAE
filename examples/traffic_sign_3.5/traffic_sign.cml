float time_loading;
float time_testing;
int SIGNS2TRAINING;
int SIGNS2TESTING;

#Full dataset
#SIGNS2TRAINING = 39209;
#SIGNS2TESTING = 12630;

#Minimal dataset
SIGNS2TRAINING = 860;
SIGNS2TESTING = 430;

/* Network Status */
int MOVING;
MOVING = 0;
int TRAINING;
TRAINING = 1;
int TESTING;
TESTING = 2;

int SAVE;
SAVE = 0;

/* Iterators */
int i;
int j;
int k;

int confidence;

if (SAVE)
{
	SaveConfig ("network-configuration-trafficsign.csv");
	SaveSynapses ("synaptic-interconnection-pattern-trafficsign.csv");
	SaveDataset ("training-set-trafficsign.csv", 1);
	SaveDataset ("testing-set-trafficsign.csv", 1);
}

/* Training Phase */
/*
SetNetworkStatus (TRAINING);

i = 1;
while (i <= SIGNS2TRAINING)
{
	print ("i = ",i);

	GetSignByIndex (i);
	
	j = 1;
	while (j <= 1)
	{
		if (j == 1) #training with original image shape
			SetReshapeFilterParams(0);
		else
			SetReshapeFilterParams(1);
	
		forward filters;
		#forward outputs;
		draw out_landmark_red based on out_traffic_gaussian move;
		draw out_landmark_green based on out_traffic_gaussian move;
		draw out_landmark_blue based on out_traffic_gaussian move;
		
		if (SAVE)
			SaveDataset ("training-set-trafficsign.csv", 0);
		else
			train network;
				
		j = j + 1;
	}
	i = i + 1;
}

unload to "netmem.dump";
unload "nl_landmark_red" to "netmem.red";
unload "nl_landmark_green" to "netmem.green";
unload "nl_landmark_blue" to "netmem.blue";
*/

destroy network;
reload from "netmem.dump";

time;
print("Start timer:", 0);

reload "nl_landmark_red" from "netmem.red";
reload "nl_landmark_green" from "netmem.green";
reload "nl_landmark_blue" from "netmem.blue";

time_loading = time;
print("Load time in ms:", time_loading);

/* Testing phase */
SetNetworkStatus (TESTING);
i = 1;
while (i <= SIGNS2TESTING)
{
	GetSignByIndex (i);

	k = 0;
	confidence = 0;
	while ((k < 1) && (confidence < 100))
	{
		j = 1;
		while (j <= 1)
		{
			if ((j == 1) && (k == 0))
				SetReshapeFilterParams(0);
			else
				SetReshapeFilterParams(1);

			if (SAVE)
			{
				forward filters;
				forward outputs;
				draw out_landmark_red based on out_traffic_gaussian move;
				draw out_landmark_green based on out_traffic_gaussian move;
				draw out_landmark_blue based on out_traffic_gaussian move;
				SaveDataset ("testing-set-trafficsign.csv", 0);
			}
			else
			{   
				forward network;
				forward filters;
				forward neural_layers;
				forward out_landmark_blue;
			}

			j = j + 1;
		}
		confidence = GetConfidence(0);
		k = k + 1;
	}
	PrintStatistics(0);
	i = i + 1;
}

time_testing = time;
print("Test time in ms:", time_testing - time_loading);

quit;
